{"version":3,"sources":["components/cage.js","components/board.js","components/controll.js","components/App.js","serviceWorker.js","index.js"],"names":["Cage","changeValue","event","_this","props","index","value","this","react_default","a","createElement","className","onClick","React","Component","Board","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this$state","state","cageValues","currentTurnType","turnType","_this$props","playerType","mode","newCageValues","toConsumableArray","nextTurnType","setState","objectSpread","setTimeout","aiTurn","restart","Array","fill","false","true","end","onRestart","_this$state2","_this$props2","difficulty","array","AItype","free","forEach","element","push","i","length","item","testAr","result","checkWinner","r","Math","random","ceil","additionalComb","balanceComb","makeAutoselction","_this2","_this$state3","_this$props3","cages","map","cage_Cage","checkResult","endGame","finishGame","vinCombination","involvedCages","X","O","k","allPosition","sort","counter","j","checkArrey","arr","elem","Controll","playerChoice","text","App","message","gameStage","setMode","setDifficulty","setType","type","goToMenu","ind","hidden","board_Board","controll_Controll","visible","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a7441bf.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/cage.css';\r\nexport default class Cage extends React.Component {\r\n  changeValue = (event) => {\r\n    //console.log(this);\r\n      this.props.changeValue(this.props.index);\r\n  }\r\n  render() {\r\n    const { value } = this.props;\r\n    return (\r\n      <span className=\"cage\" onClick={this.changeValue}>{value}</span>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport Cage from './cage';\r\nimport '../css/board.css';\r\nexport default class Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cageValues: Array(9).fill(' '),\r\n            turnType: {\r\n                'false': \"X\",\r\n                'true': 'O'\r\n            },\r\n            end: '',\r\n            currentTurnType: 'X'\r\n\r\n        }\r\n    }\r\n    changeValue = (index) => {\r\n        const { cageValues, currentTurnType, turnType } = this.state;\r\n        const { playerType, mode } = this.props;\r\n        if (currentTurnType === playerType && mode === 'AI' || mode !== \"AI\") {\r\n            if (cageValues[index] === \" \") {\r\n                const newCageValues = [...cageValues];\r\n                newCageValues[index] = currentTurnType;\r\n                const nextTurnType = turnType[currentTurnType === \"X\"];\r\n                this.setState({\r\n                    ...this.state,\r\n                    cageValues: newCageValues,\r\n                    currentTurnType: nextTurnType\r\n                })\r\n                setTimeout(() => {\r\n                    this.aiTurn();\r\n                }, 500)\r\n            }\r\n        }\r\n    }\r\n    restart = () => {\r\n        this.setState({\r\n            cageValues: Array(9).fill(' '),\r\n            turnType: {\r\n                'false': \"X\",\r\n                'true': 'O'\r\n            },\r\n            end: '',\r\n            currentTurnType: 'X'\r\n        })\r\n        this.props.onRestart();\r\n    }\r\n    aiTurn = () => {\r\n        const { cageValues, currentTurnType, end, turnType } = this.state;\r\n        const { mode, difficulty, playerType } = this.props;\r\n        if (mode === 'AI' && currentTurnType !== playerType && !end) {\r\n            // console.log(difficulty, playerType)\r\n            const index = makeAutoselction(cageValues, difficulty, playerType, currentTurnType);\r\n            if (cageValues[index] === \" \") {\r\n                const newCageValues = [...cageValues];\r\n                newCageValues[index] = currentTurnType;\r\n                const nextTurnType = turnType[currentTurnType === \"X\"];\r\n                this.setState({\r\n                    ...this.state,\r\n                    cageValues: newCageValues,\r\n                    currentTurnType: nextTurnType\r\n                })\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        const { cageValues, end } = this.state;\r\n        const { restart, playerType,mode} = this.props;\r\n        const cages = cageValues.map((value, index) => {\r\n            return (<Cage value={value} index={index} changeValue={this.changeValue} />)\r\n        });\r\n        const checkResult = checkWinner(cageValues);\r\n        if (restart) {\r\n            this.restart();\r\n        }\r\n        if (playerType === 'O'&&mode==='AI') {\r\n            setTimeout(() => {\r\n                this.aiTurn();\r\n            }, 500)\r\n        }\r\n        if (!end) {\r\n            const endGame = checkResult ? (checkResult === 'end' ? 'End Game' : 'Winner ' + checkResult) : '';\r\n            // console.log(endGame);\r\n            if (endGame) {\r\n                this.props.finishGame(endGame);\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"board\" >\r\n                {cages}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction checkWinner(array) {\r\n    const vinCombination = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 4, 8], [2, 4, 6], [0, 3, 6], [1, 4, 7], [2, 5, 8]];\r\n    const involvedCages = {\r\n        'X': [],\r\n        'O': []\r\n    }\r\n    // console.log(array);\r\n    array.forEach((element, index) => {\r\n        if (element !== ' ')\r\n            involvedCages[element].push(index);\r\n    });\r\n    if (involvedCages.X.length + involvedCages.O.length < 4)\r\n        return null;\r\n    for (let k in involvedCages) {\r\n        const allPosition = involvedCages[k].sort();\r\n        for (let i = 0; i < vinCombination.length; i++) {\r\n            const element = vinCombination[i]\r\n            let counter = 0;\r\n            for (let j = 0; j < element.length; j++) {\r\n                if (checkArrey(allPosition, element[j])) {\r\n                    counter++;\r\n                }\r\n            }\r\n            if (counter === 3) {\r\n                return k;\r\n            }\r\n        }\r\n    }\r\n    if (involvedCages.X.length + involvedCages.O.length === 9)\r\n        return 'end';\r\n    return null;\r\n}\r\n\r\nfunction makeAutoselction(array, difficulty, playerType, AItype) {\r\n    const free = [];\r\n    array.forEach((element, index) => {\r\n        if (element === ' ') {\r\n            free.push(index);\r\n        }\r\n    });\r\n    if (difficulty !== '0') {\r\n        for (let i = 0; i < free.length; i++) {\r\n            const item = free[i];\r\n            const testAr = [...array];\r\n            testAr[item] = playerType;\r\n            const result = checkWinner(testAr);\r\n            if (result === playerType) {\r\n                return free[i];\r\n            }\r\n        }\r\n    }\r\n    if (difficulty !== '2') {\r\n        const r = Math.random();\r\n        return free[Math.ceil(free.length * r) - 1];\r\n    } else {\r\n        const additionalComb = [0, 2, 6, 8];\r\n        const balanceComb = [1, 3, 5, 7];\r\n        for (let i = 0; i < free.length; i++) {\r\n            const item = free[i];\r\n            const testAr = [...array];\r\n            testAr[item] = AItype;\r\n            const result = checkWinner(testAr);\r\n            if (result === playerType) {\r\n                return free[i];\r\n            }\r\n        }\r\n        if (array[4] === ' ') {\r\n            return 4;\r\n        } else {\r\n            for (let i = 0; i < additionalComb.length; i++) {\r\n                const element = additionalComb[i]\r\n                if (array[element] === ' ') {\r\n                    return element;\r\n                }\r\n            }\r\n            for (let i = 0; i < balanceComb.length; i++) {\r\n                const element = balanceComb[i]\r\n                if (array[element] === ' ') {\r\n                    return element;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction checkArrey(arr, elem) {\r\n    for (let i = 0; i < arr.length; i++) {\r\n        if (elem === arr[i]) {\r\n            return true\r\n        }\r\n    }\r\n    return false;\r\n}","import React from 'react';\r\nimport '../css/controll.css';\r\nexport default class Controll extends React.Component {\r\n  onClick = (event) => {\r\n    this.props.playerChoice(this.props.value);\r\n  }\r\n  render() {\r\n    const { text } = this.props;\r\n    return (\r\n        <span className='controll'onClick={this.onClick}>{text}</span>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport '../css/App.css';\nimport Board from './board'\nimport Controll from './controll'\nimport Cage from './cage';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStage: 0,\n      //gameStages=['choicePlayer', 'choiceMode', 'game', 'end'],\n      end: {\n        ind: \"false\",\n        message: ''\n      },\n      playerType: 'X',\n      mode: \"player\",\n      difficulty: '0',\n      restart: false\n    }\n  }\n  finishGame = (message) => {\n    this.setState({\n      ...this.state,\n      endGame: \"true\",\n      message: message,\n      gameStage: 3,\n      restart: true\n    })\n  }\n  setMode = (mode) => {\n    const gameStage = mode === 'AI' ? 4 : 2;\n    this.setState({\n      ...this.state,\n      mode: mode,\n      gameStage: gameStage\n    })\n  }\n  setDifficulty = (difficulty) => {\n    this.setState({\n      ...this.state,\n      difficulty: difficulty,\n      gameStage: 2\n    })\n  }\n  setType=(type)=>{\n    this.setState({\n      ...this.state,\n      playerType: type,\n      gameStage: 1\n    })\n  }\n  goToMenu = () => {\n    this.setState({\n      ...this.state,\n      gameStage: 0\n    })\n  }\n  onRestart = () => {\n    this.setState({\n      ...this.state,\n      restart: false\n    })\n  }\n  render() {\n    const { message, endGame, gameStage, mode, difficulty, playerType, restart } = this.state;\n    return (\n      <div className=\"App\" >\n        <div className='gameArea' hidden={(gameStage !== 2)}>\n          <Board finishGame={this.finishGame} mode={mode} difficulty={difficulty} playerType={playerType} onRestart={this.onRestart} restart={restart} />\n        </div>\n        <div className='selectModeArea' hidden={(gameStage !== 0)}>\n          <Controll value='AI' text='1 player' playerChoice={this.setMode} />\n          <Controll value='player' text='2 player' playerChoice={this.setMode} />\n        </div>\n        <div className='selectTypeArea' hidden={(gameStage !== 4)}>\n          <Cage value='O' index='O' changeValue={this.setType} />\n          <Cage value='X' index='X' changeValue={this.setType} />\n        </div>\n        <div className='selectDifficultyArea' hidden={(gameStage !== 1)}>\n          <Controll value='0' text='easy' playerChoice={this.setDifficulty} />\n          <Controll value='1' text='normal' playerChoice={this.setDifficulty} />\n          <Controll value='2' text='hard' playerChoice={this.setDifficulty} />\n        </div>\n        <div className='endGame' hidden={(gameStage !== 3)}>\n          <span className='message' visible={endGame}>{message}</span>\n          <Controll value='' text='menu' playerChoice={this.goToMenu} />\n          <Controll value={difficulty} text='restart' playerChoice={this.setDifficulty} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}